{"version":3,"sources":["b1-ui/common/buttons/Button.tsx","b1-ui/common/input/Input.tsx","b1-ui/common/checkbox/CheckBox.tsx","features/p0-test/TestPage.tsx","features/p1-auth/LoginPage.tsx","features/p2-RegPage/RegPage.tsx","features/p3-RecoveryPage/RecoveryPage.tsx","features/p4-ChangePassPage/ChangePassPage.tsx","features/p5-ProfilePage/ProfilePage.tsx","b1-ui/header/NavMenu.tsx","b1-ui/App/App.tsx","serviceWorker.ts","b2-bll/LoginPageReducer.ts","b2-bll/RegPageReducer.ts","b2-bll/RecoveryPageReducer.ts","b2-bll/ChangePasswordPageReducer.ts","b2-bll/ProfilePageReducer.ts","b2-bll/store.ts","index.tsx"],"names":["Button","props","children","restProps","Input","onEnter","error","St","marginLeft","marginRight","borderColor","style","onKeyPress","e","charCode","color","fontWeight","CheckBox","className","id","type","htmlFor","TestPage","acton","alert","onClick","LoginPage","RegPage","RecoveryPage","ChangePasswordPage","ProfilePage","NavMenu","height","backgroundColor","to","App","path","component","render","Boolean","window","location","hostname","match","initialState","email","password","firstName","lastName","newPassword","repeatNewPassword","age","city","rootReducer","combineReducers","loginPage","state","action","regPage","recoveryPage","changePasswordPage","profilePage","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ae669e0a.chunk.js","sourcesContent":["import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport \"./Button.scss\"\r\n\r\nexport type ButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n    let {children, ...restProps} = props\r\n    debugger\r\n    return (\r\n        <button {...restProps}>\r\n            {children}\r\n        </button>\r\n    )\r\n}","import {InputHTMLAttributes, DetailedHTMLProps, CSSProperties, useState, ChangeEvent} from \"react\";\r\nimport React from \"react\";\r\nimport \"./Input.scss\"\r\n\r\n\r\nexport type InputNyaPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n    & { onEnter?: () => void, error?: string };\r\n\r\nexport const Input = (props: InputNyaPropsType) => {\r\n    const {onEnter, error,  ...restProps} = props;\r\n\r\n    const onKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) onEnter && onEnter();\r\n    }\r\n\r\n    let St: CSSProperties = error ?\r\n        {marginLeft: 10, marginRight: 10, borderColor: 'red'} :\r\n        {marginLeft: 10, marginRight: 10};\r\n\r\n\r\n    let errorStyle: CSSProperties = {color: 'red', fontWeight: 'bold'}\r\n\r\n\r\n    debugger\r\n    return (\r\n        <>\r\n            <input style={St} onKeyPress={onKeyPress}  {...restProps}/>\r\n            {error ? <div style={errorStyle}>{error}</div> : null}\r\n        </>\r\n    );\r\n};","import React from \"react\";\r\nimport \"./CheckBox.scss\"\r\n\r\nexport const CheckBox = () => {\r\n    return (\r\n            <div>\r\n                <input className=\"styled-checkbox\" id=\"styled-checkbox-1\" type=\"checkbox\"/>\r\n                <label htmlFor=\"styled-checkbox-1\">Checkbox</label>\r\n            </div>\r\n    );\r\n};","import React from \"react\";\r\nimport './TestPage.scss';\r\nimport {Button} from \"../../b1-ui/common/buttons/Button\";\r\nimport {Input} from \"../../b1-ui/common/input/Input\";\r\nimport {CheckBox} from \"../../b1-ui/common/checkbox/CheckBox\";\r\n\r\n\r\nexport const TestPage = () => {\r\n\r\n    const acton = () => {\r\n        alert(\"hey\")\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"wrapper\"}>\r\n\r\n            <div>\r\n                <Button onClick={acton} className={'buttonInner'}>Victor</Button>\r\n            </div>\r\n            <div>\r\n                <Button onClick={acton} className={'buttonOuter'}>Dima</Button>\r\n            </div>\r\n            <div>\r\n                <Input error={''} onEnter={acton} type={\"text\"}/>\r\n            </div>\r\n            <div>\r\n                <CheckBox/>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const LoginPage=()=>{\r\n    return(\r\n        <div>\r\n           LOGIN PAGE\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const RegPage=()=>{\r\n    return(\r\n        <div>\r\n            REGISTRATION PAGE\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const RecoveryPage=()=>{\r\n    return(\r\n        <div>\r\n            RECOVERY PAGE\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const ChangePasswordPage=()=>{\r\n    return(\r\n        <div>\r\n            CHANGE PASSWORD PAGE\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const ProfilePage=()=>{\r\n    return(\r\n        <div>\r\n            PROFILE PAGE\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport \"./NavMenu.scss\"\r\n\r\nexport const NavMenu = () => {\r\n\r\n    return (\r\n        <div style={\r\n            {\r\n                height: \"50px\",\r\n                backgroundColor: \"rgba(1,13,41,0.87)\"\r\n            }\r\n        }>\r\n            <div>\r\n                <span className={\"navItem\"}><NavLink to={'/test'}>TEST</NavLink></span>\r\n                <span className={\"navItem\"}><NavLink to={'/login'}>LOGIN</NavLink></span>\r\n                <span className={\"navItem\"}><NavLink to={'/registration'}>REGISTRATION</NavLink></span>\r\n                <span className={\"navItem\"}><NavLink to={'/recovery-password'}>RECOVERY</NavLink></span>\r\n                <span className={\"navItem\"}><NavLink to={'/change-password'}>CHANGE_PASSWORD</NavLink></span>\r\n                <span className={\"navItem\"}><NavLink to={'/profile'}>PROFILE</NavLink></span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.scss';\nimport {TestPage} from \"../../features/p0-test/TestPage\";\nimport { Route, Switch } from 'react-router-dom';\nimport { LoginPage } from '../../features/p1-auth/LoginPage';\nimport {RegPage} from \"../../features/p2-RegPage/RegPage\";\nimport { RecoveryPage } from '../../features/p3-RecoveryPage/RecoveryPage';\nimport {ChangePasswordPage} from \"../../features/p4-ChangePassPage/ChangePassPage\";\nimport {ProfilePage} from \"../../features/p5-ProfilePage/ProfilePage\";\nimport { NavMenu } from '../header/NavMenu';\n\nconst App=()=> {\n  return (\n    <div className=\"App\">\n        <NavMenu/>\n        <Switch>\n            <Route path={'/test'} component={TestPage}/>\n            <Route path={'/login'} component={LoginPage}/>\n            <Route path={'/registration'} component={RegPage}/>\n            <Route path={'/recovery-password'} component={RecoveryPage}/>\n            <Route path={'/change-password'} component={ChangePasswordPage}/>\n            <Route path={'/profile'} component={ProfilePage}/>\n            <Route  path={'*'} render={() => <div>404 NOT FOUND </div>}/>\n        </Switch>\n\n        {/*<Switch>*/}\n        {/*    <Route path={'/counter'} render={() => <Counter/> } />*/}\n        {/*    <Route path={'/settings'} render={() => <CounterSettings/> }/>*/}\n        {/*    <Redirect exact path={'/'} to={'/counter'}/>*/}\n        {/*    <Route  path={'*'} render={() => <div>404 NOT FOUND </div>}/>*/}\n        {/*</Switch>*/}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {InferActionTypes} from \"./store\";\r\n\r\nlet initialState={\r\n    email:null,\r\n    password:null\r\n}\r\n\r\ntype InitialStateType=typeof initialState\r\n\r\n\r\n\r\nexport const loginPageReducer = (state:InitialStateType=initialState, action: any) => {\r\n    switch (action.type) {\r\n        case \"fdsf\":\r\n            return {...state}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\ntype ActionType =  InferActionTypes<typeof actions>\r\n\r\nconst actions = {\r\n    setCounterValue: (value: number) => {\r\n        return ( {type: '', value} as const)\r\n\r\n    },\r\n    updateCounterValue: (value: number) => {\r\n        return ({type: '', value: value} as const)\r\n    }\r\n}","import {InferActionTypes} from \"./store\";\r\n\r\nlet initialState={\r\n    email:null,\r\n    password:null,\r\n    firstName:null,\r\n    lastName:null\r\n}\r\n\r\ntype InitialStateType=typeof initialState\r\n\r\n\r\n\r\nexport const regPageReducer = (state:InitialStateType=initialState, action: any) => {\r\n    switch (action.type) {\r\n        case \"fdsf\":\r\n            return {...state}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\ntype ActionType =  InferActionTypes<typeof actions>\r\n\r\nconst actions = {\r\n    setCounterValue: (value: number) => {\r\n        return ( {type: '', value} as const)\r\n\r\n    },\r\n    updateCounterValue: (value: number) => {\r\n        return ({type: '', value: value} as const)\r\n    }\r\n}","import {InferActionTypes} from \"./store\";\r\n\r\nlet initialState={\r\n    email:null\r\n}\r\n\r\ntype InitialStateType=typeof initialState\r\n\r\n\r\n\r\nexport const recoveryPageReducer = (state:InitialStateType=initialState, action: any) => {\r\n    switch (action.type) {\r\n        case \"fdsf\":\r\n            return {...state}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\ntype ActionType =  InferActionTypes<typeof actions>\r\n\r\nconst actions = {\r\n    setCounterValue: (value: number) => {\r\n        return ( {type: '', value} as const)\r\n\r\n    },\r\n    updateCounterValue: (value: number) => {\r\n        return ({type: '', value: value} as const)\r\n    }\r\n}","import {InferActionTypes} from \"./store\";\r\n\r\nlet initialState={\r\n    newPassword:null,\r\n    repeatNewPassword:null\r\n}\r\n\r\ntype InitialStateType=typeof initialState\r\n\r\n\r\n\r\nexport const changePasswordPageReducer = (state:InitialStateType=initialState, action: any) => {\r\n    switch (action.type) {\r\n        case \"fdsf\":\r\n            return {...state}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\ntype ActionType =  InferActionTypes<typeof actions>\r\n\r\nconst actions = {\r\n    setCounterValue: (value: number) => {\r\n        return ( {type: '', value} as const)\r\n\r\n    },\r\n    updateCounterValue: (value: number) => {\r\n        return ({type: '', value: value} as const)\r\n    }\r\n}","import {InferActionTypes} from \"./store\";\r\n\r\nlet initialState={\r\n    firstName:null,\r\n    lastName:null,\r\n    age:null,\r\n    city:null,\r\n    email:null\r\n}\r\n\r\ntype InitialStateType=typeof initialState\r\n\r\n\r\n\r\nexport const profilePageReducer = (state:InitialStateType=initialState, action: any) => {\r\n    switch (action.type) {\r\n        case \"fdsf\":\r\n            return {...state}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\ntype ActionType =  InferActionTypes<typeof actions>\r\n\r\nconst actions = {\r\n    setCounterValue: (value: number) => {\r\n        return ( {type: '', value} as const)\r\n\r\n    },\r\n    updateCounterValue: (value: number) => {\r\n        return ({type: '', value: value} as const)\r\n    }\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {loginPageReducer} from \"./LoginPageReducer\";\r\nimport {regPageReducer} from \"./RegPageReducer\";\r\nimport {recoveryPageReducer} from \"./RecoveryPageReducer\";\r\nimport {changePasswordPageReducer} from \"./ChangePasswordPageReducer\";\r\nimport {profilePageReducer} from \"./ProfilePageReducer\";\r\n\r\nexport type InferActionTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never;\r\n\r\nconst rootReducer = combineReducers({\r\n    loginPage: loginPageReducer,\r\n    regPage: regPageReducer,\r\n    recoveryPage: recoveryPageReducer,\r\n    changePasswordPage: changePasswordPageReducer,\r\n    profilePage: profilePageReducer\r\n\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './b1-ui/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./b2-bll/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <HashRouter>\n          <Provider store={store}>\n              <App/>\n          </Provider>\n      </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}